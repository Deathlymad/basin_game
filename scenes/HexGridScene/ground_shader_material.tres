[gd_resource type="ShaderMaterial" load_steps=7 format=3 uid="uid://bwphobtg7atmn"]

[ext_resource type="Texture2D" uid="uid://c715pf3fcu7iy" path="res://assets/textures/basinfloor_alb.png" id="1_b2ww6"]
[ext_resource type="Texture2D" uid="uid://ci5kc8j52mo5u" path="res://assets/textures/basinfloor_nor.png" id="2_cswdr"]
[ext_resource type="Texture2D" uid="uid://cqbr4jhqfi80b" path="res://assets/textures/basinfloor_alb_brown.png" id="2_fimrh"]
[ext_resource type="Texture2D" uid="uid://cyecy162we13b" path="res://assets/textures/basinfloor_alb_green.png" id="3_vvtns"]
[ext_resource type="Texture2D" uid="uid://c7dqgcp72svgx" path="res://assets/textures/basinfloor_alb_grey.png" id="4_trud6"]

[sub_resource type="Shader" id="Shader_b2ww6"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_albedo_green : source_color, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_albedo_brown : source_color, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_albedo_grey : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

varying vec2 c0;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	c0 = CUSTOM0.xy;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	vec4 albedo_tex_brown = texture(texture_albedo_brown, base_uv);
	vec4 albedo_tex_green = texture(texture_albedo_green, base_uv);
	vec4 albedo_tex_grey = texture(texture_albedo_grey, base_uv);
	float h = 0.5; // offset for brown value
    vec4 col = mix(mix(albedo_tex, albedo_tex_brown, c0.x/h), mix(albedo_tex_brown, albedo_tex_green, (c0.x - h)/(1.0f - h)), step(h, c0.x));
    
	vec4 temp_alb = mix(col, albedo_tex_grey, c0.y);
	ALBEDO = albedo.rgb * temp_alb.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = texture(texture_normal, base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_b2ww6")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = ExtResource("1_b2ww6")
shader_parameter/texture_albedo_green = ExtResource("3_vvtns")
shader_parameter/texture_albedo_brown = ExtResource("2_fimrh")
shader_parameter/texture_albedo_grey = ExtResource("4_trud6")
shader_parameter/albedo_texture_size = Vector2i(4320, 4320)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.0
shader_parameter/texture_normal = ExtResource("2_cswdr")
shader_parameter/normal_scale = 0.1
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
